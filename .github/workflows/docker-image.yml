name: Docker Image CI


on:
  push: 
    branches: [ master ]
env:
  PROJECT_ID: ${{secrets.PROJECT_ID}} 
  GKE_CLUSTER: dev-cluster
  GKE_ZONE: us-central1-c    
  
jobs:

  build:
    runs-on: ubuntu-latest
    

    steps:
        - name: Git Checkout Code
          uses: actions/checkout@v1
          id: git_checkout
          
        - name: Set up Google Cloud Cli
          uses: google-github-actions/setup-gcloud@v0.2.0
          with:
            service_account_key: ${{secrets.GOOGLE_KEY}}
            project_id: ${{secrets.PROJECT_ID}}
            export_default_credentials: true
        - name: set env variable 
          run: |
            echo "CONTAINER_PATH=us.gcr.io/$PROJECT_ID/ihapp" >> $GITHUB_ENV
            echo "NOTE_ID=my-attestors-note">> $GITHUB_ENV
            echo "ATTESTOR_ID=dev-qualified">> $GITHUB_ENV
            echo "PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID  --format="value(projectNumber)")" >> $GITHUB_ENV
            echo "KEY_LOCATION=global" >> $GITHUB_ENV
            echo "KEYRING=binauthz1-keys" >> $GITHUB_ENV
            echo "KEY_NAME=DevEnv3" >> $GITHUB_ENV
            echo "KEY_VERSION=1" >> $GITHUB_ENV
            
  
#  Build the Docker image
#        - name: Build
 #         run: |-
 #           docker build -t us.gcr.io/$PROJECT_ID/ihapp .
 #       - name: Authorization 
 #         run: |-
 #          gcloud auth configure-docker -q
             
    # Push the Docker image to Google Container Registry
  #      - name: Publish
  #        run: |-
  #           docker push $CONTAINER_PATH
 # Creating attestors note 
        - name: creating attestors notes 
          run: |-
            echo "BINAUTHZ_SA_EMAIL="service-$PROJECT_NUMBER@gcp-sa-binaryauthorization.iam.gserviceaccount.com"">> $GITHUB_ENV
            curl -vvv -X POST \
            -H "Content-Type: application/json"  \
            -H "Authorization: Bearer $(gcloud auth print-access-token)"  \
            --data-binary @create_note_request.json  \
            "https://containeranalysis.googleapis.com/v1/projects/${PROJECT_ID}/notes/?noteId=${NOTE_ID}"
 #Verifying note is saved or not 
        - name: verify if note is saved 
          run: |-
            curl -vvv  \
             -H "Authorization: Bearer $(gcloud auth print-access-token)" \
             "https://containeranalysis.googleapis.com/v1/projects/${PROJECT_ID}/notes/${NOTE_ID}"
 # Creating attestor 
        - name: creating attestor
#          continue-on-error: true
          run: |
            gcloud container binauthz attestors describe $ATTESTOR_ID || \
            gcloud container binauthz attestors create $ATTESTOR_ID \
              --attestation-authority-note=$NOTE_ID \
              --attestation-authority-note-project=${PROJECT_ID}
 # Verifying attestors 
        - name: Verifying attestors 
          run: |-
            gcloud container binauthz attestors list
# Creating policy 
        - name: Creating policy 
          run: |
            gcloud container binauthz policy import policy.yaml
# creating appropriate IAM roles 
        - name: creating IAM roles 
          run: |-
           curl -X POST  \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $(gcloud auth print-access-token)" \
            --data-binary @iam.json \
            "https://containeranalysis.googleapis.com/v1/projects/${PROJECT_ID}/notes/${NOTE_ID}:setIamPolicy"
# creating kms keys for attestors 
        - name: key creation
          run: |-
           gcloud kms keyrings describe --location=global $KEYRING || \
           gcloud kms keyrings create --quiet "${KEYRING}" --location="${KEY_LOCATION}"
           gcloud kms keys describe $KEY_NAME --keyring=$KEYRING --location=global || \
           gcloud kms keys create   "${KEY_NAME}" \
            --keyring="${KEYRING}" --location="${KEY_LOCATION}" \
            --purpose asymmetric-signing  --default-algorithm="ec-sign-p256-sha256"
            gcloud container binauthz attestors describe dev-qualified | grep -i "signatureAlgorithm" || \
            gcloud  container binauthz attestors public-keys add    \
              --attestor="${ATTESTOR_ID}"  \
              --keyversion-project="${PROJECT_ID}"  \
              --keyversion-location="${KEY_LOCATION}" \
              --keyversion-keyring="${KEYRING}" \
              --keyversion-key="${KEY_NAME}" \
              --keyversion="${KEY_VERSION}"
# verifying 
        - name: verifying the attachment 
          run: |
            gcloud container binauthz attestors list
# signing container 
        - name: ferching container digest 
          run: |
             echo "DIGEST=$(gcloud container images describe ${CONTAINER_PATH}:latest --format='get(image_summary.digest)')" >> $GITHUB_ENV
        - name: signing container image
          continue-on-error: true
          run: |
            gcloud components install beta --quiet
            gcloud beta container binauthz attestations sign-and-create  \
             --artifact-url="${CONTAINER_PATH}@${DIGEST}" \
             --attestor="${ATTESTOR_ID}" \
             --attestor-project="${PROJECT_ID}" \
             --keyversion-project="${PROJECT_ID}" \
             --keyversion-location="${KEY_LOCATION}" \
             --keyversion-keyring="${KEYRING}" \
             --keyversion-key="${KEY_NAME}" \
             --keyversion="${KEY_VERSION}"

        - name: Get GKE Credentials
          run: |-
              gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
    #    - name: Deploy argocd on cluster 
  #        run: |-
   #          kubectl get namespace argocd || \
    #         kubectl create namespace argocd
     #        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      #       kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
        - name: "Clone reposiory"
          uses: actions/checkout@v2
          with:
           repository: "sendtoashish/ihapp-application.git"
           ref: "master"
        - name: deploy app
          run: |-
           apt-get install gettext-base        
           DIGEST=$(gcloud container images describe ${CONTAINER_PATH}:latest --format='get(image_summary.digest)') \
           envsubst <ihapp-application/indianhandicrafts/k8s/lab1-vanilla/web-deployment.yaml> output.txt
           cat output.txt
             
#            kubectl create deployment ihapp-signed --image="${CONTAINER_PATH}@${DIGEST}"
            
