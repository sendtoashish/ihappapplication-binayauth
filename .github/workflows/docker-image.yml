name: Docker Image CI

on:
  push: 
    branches: [ master ]
env:
  PROJECT_ID: ${{secrets.PROJECT_ID}} 
  GKE_CLUSTER: github-action-gke
  GKE_ZONE: us-central1-c
  
jobs:

  build:
    runs-on: ubuntu-latest

    steps:
        - name: Git Checkout Code
          uses: actions/checkout@v1
          id: git_checkout
#        - name: Build Docker Image
#          id: buildAndPushImage
#          uses: mr-smithers-excellent/docker-build-push@v5 
#          with:
#           image: sendtoashish123/ihapp
#           tags: v1
#           registry: docker.io
#           dockerfile: indianhandicrafts/Dockerfile
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Set up Google Cloud Cli
          uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
          env:
            ACTIONS_ALLOW_UNSECURE_COMMANDS: true
          with:
            service_account_key: ${{secrets.GOOGLE_KEY}}
            project_id: ${{secrets.PROJECT_ID}}
        - name: set env variable 
          run: |
            echo "CONTAINER_PATH=us.gcr.io/$PROJECT_ID/ihapp:v1" >> $GITHUB_ENV
            echo "NOTE_ID=my-attestors-note">> $GITHUB_ENV
            echo "ATTESTOR_ID=dev-qualified">> $GITHUB_ENV
 #    Build the Docker image
#        - name: Build
#          run: |-
#            docker build -t us.gcr.io/$PROJECT_ID/ihapp:v1 .
#        - name: Authorization 
#          run: |-
#           gcloud auth configure-docker -q
             
    # Push the Docker image to Google Container Registry
 #       - name: Publish
 #         run: |-
 #            docker push $CONTAINER_PATH
 # Creating attestors note 
 #       - name: creating attestors notes 
 #         run: |-
 #           curl -vvv -X POST \
 #           -H "Content-Type: application/json"  \
 #           -H "Authorization: Bearer $(gcloud auth print-access-token)"  \
 #           --data-binary @create_note_request.json  \
 #           "https://containeranalysis.googleapis.com/v1/projects/${PROJECT_ID}/notes/?noteId=${NOTE_ID}"
 #Verifying note is saved or not 
 #       - name: verify if note is saved 
 #         run: |-
 #           curl -vvv  \
 #            -H "Authorization: Bearer $(gcloud auth print-access-token)" \
 #            "https://containeranalysis.googleapis.com/v1/projects/${PROJECT_ID}/notes/${NOTE_ID}"
 # Creating attestor 
        - name: creating attestor 
          run: |
              gcloud container binauthz attestors create $ATTESTOR_ID \
              --attestation-authority-note=$NOTE_ID \
 #    # Creating policy 
 #       - name: Creating policy 
 #         run: |
 #           gcloud container binauthz policy import policy.yaml

              --attestation-authority-note-project=${PROJECT_ID}
 
#        - uses: sigstore/cosign-installer@main

#        - name: Write signing key to disk (only needed for `cosign sign --key`)
#          run: echo "${{ secrets.COSIGN_SECRET }}" > cosign.key

#        - name: Sign container image
#          run: |-       
#            cosign sign --key cosign.key \
#            docker.io/sendtoashish123/ihapp:v1
#        - name: Set up Google Cloud Cli
#          uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
#          env:
#            ACTIONS_ALLOW_UNSECURE_COMMANDS: true
#          with:
#            service_account_key: ${{secrets.GOOGLE_KEY}}
#            project_id: ${{secrets.PROJECT_ID}}
#        - name: Get GKE Credentials
#          run: |-
#              gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
#        - name: Deploy argocd on cluster 
#          run: |-
#             kubectl create namespace argocd
#             kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
#             kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
#        - name: "Clone reposiory"
#          uses: actions/checkout@v2
#          with:
#           repository: "sendtoashish/ihapp-application.git"
#           ref: "master"
#        - name: deploy app
#          run: |-
#            kubectl apply -f indianhandicrafts/argocd.yaml
